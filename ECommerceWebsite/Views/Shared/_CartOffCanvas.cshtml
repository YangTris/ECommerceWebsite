@model IEnumerable<ECommerceWebsite.Models.CartItemViewModel>

<div class="offcanvas offcanvas-end" tabindex="-1" id="cartOffcanvas" aria-labelledby="cartOffcanvasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="cartOffcanvasLabel">Your Cart</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="cart-items" style="max-height: 500px; overflow-y: auto;">
            @{
                decimal total = 0;
                decimal quantity;
                if (Model != null)
                {
                    foreach (var item in Model)
                    {
                        quantity = item.quantity;
                        total += item.price * item.quantity;
                        <div class="cart-item d-flex align-items-center mb-3 position-relative" id="cart-item-@item.productId">
                            <img src="~/Assets/Banner.jpg" alt="Product" class="cart-item-image me-3">
                            <div class="cart-item-details flex-grow-1">
                                <h6 class="cart-item-title mb-0">Name</h6>
                                <p class="cart-item-id text-muted small mb-0">ID: @Html.DisplayFor(modelItem => item.productId)</p>
                                <div class="d-flex justify-content-between align-items-center mt-2">
                                    <div class="cart-item-price" data-price="@item.price">@Html.DisplayFor(modelItem => item.price)$</div>
                                    <div class="cart-item-quantity">
                                        <button class="btn btn-sm btn-outline-secondary" onclick="updateQuantity(@item.productId, -1)">-</button>
                                        <span class="mx-2 quantity-value">@Html.DisplayFor(modelItem => item.quantity)</span>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="updateQuantity(@item.productId, 1)">+</button>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn-close position-absolute top-0 end-0" aria-label="Remove" style="font-size: 0.8rem;" onclick="removeCartItem(@item.productId)"></button>
                        </div>
                    }
                }
            }
        </div>
    </div>
    <div class="offcanvas-footer p-3 border-top">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <span class="fw-bold">Total:</span>
            <span class="fw-bold" id="cart-total">@total$</span>
        </div>
        <div class="d-flex flex-column gap-2">
            <div class="d-flex gap-2">
                <button class="btn btn-outline-secondary w-50" id="saveCartButton" onclick="saveCart()">Save</button>
                <button class="btn btn-outline-danger w-50" id="clearCartButton">Clear Cart</button>
            </div>
            <button class="btn btn-primary w-100 bg-blue mt-2" onclick="confirmPayout()">Payout</button>
        </div>
    </div>
</div>

<div id="notificationContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1050;"></div>



<script>
    function showNotification(message) {
        const notificationContainer = document.getElementById('notificationContainer');

        // Create notification element
        const notification = document.createElement('div');
        notification.classList.add('toast-notification', 'show');
        notification.innerText = message;

        // Append to container
        notificationContainer.appendChild(notification);

        // Remove notification after 3 seconds
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }

    function removeCartItem(productId) {
        showNotification(`Product with ID ${productId} removed from the cart.`);
    }

    function saveCart() {
        // Simulate save logic
        showNotification("Cart saved successfully!");
    }

    function confirmPayout() {
        const saveFirst = confirm("Would you like to save your cart before proceeding to payout?");
        if (saveFirst) saveCart();

        showNotification("Proceeding to payout...");
    }


</script>

